{"version":3,"sources":["Movie.js","header.js","App.js","serviceWorker.js","index.js"],"names":["Movie","index","title","poster","genres","synopsis","year","rating","date_uploaded","className","MoviePoster","alt","map","genre","MovieGenres","key","src","prototype","PropTypes","number","isRequired","string","array","Header","state","liSortBy","createSortList","ul","document","querySelector","forEach","text","li","createElement","id","addEventListener","handlerSortBy","innerText","classList","add","appendChild","propsFromParent","event","parentNode","target","selectedLi","console","log","childNodes","element","remove","props","callbackFromParent","this","Sort","fontSize","onClick","Component","App","sortBy","getMovies","a","callAPI","getMoviesData","setState","st_movies","fetch","then","Response","json","jsonData","data","movies","catch","err","renderMovies","movie","title_english","medium_cover_image","parentCallback","dataFromChild","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wWA6BA,SAASA,EAAT,GAAsF,IAAtEC,EAAqE,EAArEA,MAAOC,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,OAAQC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAuB,EAAfC,cAClE,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,kBACX,8BAAOR,EAAQ,IAEnB,yBAAKQ,UAAU,kBACX,kBAACC,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,IAClC,0CAAgBK,IAEpB,yBAAKE,UAAU,gBACX,4BAAKP,EAAL,KAAcI,EAAd,KACA,yBAAKG,UAAU,gBACVL,EAAOQ,KAAI,SAACC,EAAOZ,GAChB,OAAO,kBAACa,EAAD,CAAaD,MAAOA,EAAOE,IAAKd,QAI/C,yBAAKQ,UAAU,kBACVJ,GAEL,0BAAMI,UAAU,uBAAhB,SAMhB,SAASC,EAAT,GAAoC,IAAdP,EAAa,EAAbA,OAAQQ,EAAK,EAALA,IAC1B,OACI,yBAAKK,IAAKb,EAAQQ,IAAKA,EAAKT,MAAOS,EAAKF,UAAU,iBAI1D,SAASK,EAAT,GAAqC,IAAfD,EAAc,EAAdA,MAAc,EAAPZ,MACzB,OACI,0BAAMQ,UAAU,eAAeI,GA1DvCb,EAAMiB,UAAY,CACdhB,MAAOiB,IAAUC,OAAOC,WACxBlB,MAAOgB,IAAUG,OAAOD,WACxBjB,OAAQe,IAAUG,OAAOD,WACzBhB,OAAQc,IAAUI,MAAMF,WACxBf,SAAUa,IAAUG,OAAOD,WAC3Bd,KAAMY,IAAUG,OAAOD,WACvBb,OAAQW,IAAUC,OAAOC,WACzBZ,cAAeU,IAAUG,OAAOD,YAGpCV,EAAYO,UAAY,CACpBd,OAAQe,IAAUG,OAAOD,WACzBT,IAAKO,IAAUG,OAAOD,YAI1BN,EAAYG,UAAY,CACpBb,OAAQc,IAAUG,OAAOD,YA8CdpB,Q,gBCJAuB,E,4MA5DXC,MAAQ,CACJC,SAAU,CAAC,QAAS,OAAQ,SAAU,iBAAkB,aAAc,e,EAU1EC,eAAiB,WACb,IAAMC,EAAKC,SAASC,cAAc,UAalC,OAZoB,EAAKL,MAAMC,SAEnBK,SAAQ,SAACC,EAAM9B,GACvB,IAAM+B,EAAKJ,SAASK,cAAc,MAClCD,EAAGE,GAAKjC,EACR+B,EAAGG,iBAAiB,QAAS,EAAKC,eAClCJ,EAAGK,UAAYN,EACH,mBAATA,GAA6BC,EAAGM,UAAUC,IAAI,WAEjDZ,EAAGa,YAAYR,MAGZ,I,EAEXS,gBAAkB,SAACC,GACf,IAAIC,EAAaD,EAAME,OAAOD,WAC1BE,EAAaH,EAAME,OACvBE,QAAQC,IAAIJ,GACZA,EAAWK,WAAWlB,SAAQ,SAAAmB,GAC1BA,EAAQX,UAAUY,OAAO,cAE7BL,EAAWP,UAAUC,IAAI,WAEzB,EAAKY,MAAMC,mBAAmBV,EAAME,OAAOP,Y,kEA/B3CgB,KAAK3B,mB,+BAqCL,OACI,gCACI,qDACA,6BACI,2BAAOjB,UAAU,YAAjB,cAAyC,kBAAC6C,EAAA,EAAD,CAAMC,SAAS,WACxD,wBAAI9C,UAAU,QAAQ+C,QAASH,KAAKZ,wB,GAhDnCgB,a,gBCoENC,E,4MAjEblC,MAAQ,CACNmC,OAAQ,kB,EAQVC,U,uCAAY,WAAMD,GAAN,eAAAE,EAAA,sEACkB,EAAKC,QAAQH,GAD/B,OACJI,EADI,OAEV,EAAKC,SAAS,CACZC,UAAYF,IAHJ,2C,wDAOZD,QAAU,SAACH,GACT,OAAOO,MAAM,kDAAD,OAAmDP,IAC9DQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAqC,OAAvBxB,QAAQC,IAAIuB,GAAkBA,EAASC,KAAKC,UAC/DC,OAAM,SAAAC,GAAG,OAAI5B,QAAQC,IAAI2B,O,EAG5BC,aAAe,WAab,OAZqB,EAAKnD,MAAMyC,UAAUrD,KAAI,SAACgE,EAAO3E,GACpD,OAAO,kBAAC,EAAD,CACGc,IAAKd,EACLA,MAAOA,EACPC,MAAO0E,EAAMC,cACb1E,OAAQyE,EAAME,mBACd1E,OAAQwE,EAAMxE,OACdC,SAAUuE,EAAMvE,SAChBC,KAAMsE,EAAMtE,KACZC,OAAQqE,EAAMrE,OACdC,cAAeoE,EAAMpE,oB,EAKnCuE,eAAiB,SAACC,GAChB,EAAKhB,SAAS,CACZL,OAAQqB,EACRf,UAAW,OAIb,EAAKL,UAAUoB,I,kEAxCf3B,KAAKO,UAAUP,KAAK7B,MAAMmC,U,+BA8C1B,OACE,6BACE,kBAAC,EAAD,CAAQP,mBAAoBC,KAAK0B,iBACjC,yBAAKtE,UAAW4C,KAAK7B,MAAMyC,UAAY,MAAQ,gBAC1CZ,KAAK7B,MAAMyC,UAAYZ,KAAKsB,eAAiB,0BAAMlE,UAAU,oBAAmB,kBAAC,IAAD,a,GAzD3EgD,aCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5D,SAAS6D,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.2f6e9d0c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './css/Movie.css';\r\n\r\n\r\n// ==================================================================\r\nMovie.prototype = {\r\n    index: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n    year: PropTypes.string.isRequired,\r\n    rating: PropTypes.number.isRequired,\r\n    date_uploaded: PropTypes.string.isRequired\r\n};\r\n\r\nMoviePoster.prototype = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}; \r\n\r\n\r\nMovieGenres.prototype = {\r\n    genres: PropTypes.string.isRequired\r\n};\r\n\r\n\r\n// ====================================================================\r\nfunction Movie({index, title, poster, genres, synopsis, year, rating, date_uploaded}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"movieNumberDiv\">\r\n                <span>{index + 1}</span>\r\n            </div>\r\n            <div className=\"moviePosterDiv\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n                <span>rating : {rating}</span>\r\n            </div>\r\n            <div className=\"movieTextDiv\">\r\n                <h1>{title} ({year})</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => {\r\n                        return <MovieGenres genre={genre} key={index}/>\r\n                    })}\r\n                </div>\r\n                {/* <span className=\"movieDataUploaded\">date_uploaded : {date_uploaded}</span> */}\r\n                <div className=\"Movie_synopsis\">\r\n                    {synopsis}\r\n                </div>\r\n                <span className=\"Movie_synopsis_span\">...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    );\r\n}\r\n\r\nfunction MovieGenres({genre, index}){\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n    );\r\n}\r\n\r\n// ===================================================================\r\n\r\nexport default Movie","import React, { Component, useRef } from \"react\";\r\nimport './css/header.css'\r\nimport { Sort } from \"@material-ui/icons\";\r\n\r\n// ===============================================================\r\nclass Header extends Component {\r\n    state = {\r\n        liSortBy: ['title', 'year', 'rating', 'download_count', 'like_count', 'date_added']\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.createSortList();\r\n    }\r\n    componentdid\r\n\r\n\r\n\r\n    createSortList = () => {\r\n        const ul = document.querySelector(\".navUl\");\r\n        const liSortByArr = this.state.liSortBy;\r\n\r\n        liSortByArr.forEach((text, index) => {\r\n            const li = document.createElement(\"li\");\r\n            li.id = index;\r\n            li.addEventListener(\"click\", this.handlerSortBy);\r\n            li.innerText = text;\r\n            if(text === \"download_count\") { li.classList.add(\"clicked\"); }\r\n\r\n            ul.appendChild(li);\r\n        });\r\n\r\n        return \"\";\r\n    }\r\n    propsFromParent = (event) => {\r\n        let parentNode = event.target.parentNode;\r\n        let selectedLi = event.target;\r\n        console.log(parentNode);\r\n        parentNode.childNodes.forEach(element => {\r\n            element.classList.remove(\"clicked\");\r\n        });\r\n        selectedLi.classList.add(\"clicked\");\r\n\r\n        this.props.callbackFromParent(event.target.innerText);\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <header>\r\n                <span>Movie Rating â˜…</span>\r\n                <nav>\r\n                    <label className=\"navLabel\">Sort By&nbsp;<Sort fontSize=\"large\"/></label>\r\n                    <ul className=\"navUl\" onClick={this.propsFromParent}>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        );\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n// =============================================================\r\n\r\nexport default Header","import React, { Component } from \"react\";\nimport Movie from './Movie.js'\nimport Header from './header';\nimport './css/App.css'\nimport { Default } from 'react-awesome-spinners'\n\n\nclass App extends Component{\n  state = {\n    sortBy: \"download_count\"\n  };\n\n\n  componentDidMount(){\n    this.getMovies(this.state.sortBy) ;\n  }\n\n  getMovies = async(sortBy) => {\n    const getMoviesData = await this.callAPI(sortBy);\n    this.setState({\n      st_movies : getMoviesData\n    });\n  };\n\n  callAPI = (sortBy) => {\n    return fetch(`https://yts.mx/api/v2/list_movies.json?sort_by=${sortBy}`)\n    .then(Response => Response.json())\n    .then(jsonData => { console.log(jsonData); return jsonData.data.movies;})\n    .catch(err => console.log(err));\n  };\n\n  renderMovies = () => {\n    const movieForProp = this.state.st_movies.map((movie, index) => {\n      return <Movie \n                key={index}\n                index={index} \n                title={movie.title_english}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n                synopsis={movie.synopsis}\n                year={movie.year}\n                rating={movie.rating}\n                date_uploaded={movie.date_uploaded}/>\n    });\n    return movieForProp;\n  };\n\n  parentCallback = (dataFromChild) => {\n    this.setState({\n      sortBy: dataFromChild,\n      st_movies: null\n    });\n\n\n    this.getMovies(dataFromChild) ;\n  };\n\n\n\n  render(){\n    return (\n      <div>\n        <Header callbackFromParent={this.parentCallback}/>\n        <div className={this.state.st_movies ? \"App\" : \"App--Loading\"}>\n            {this.state.st_movies ? this.renderMovies() : <span className=\"movieLoadingSpan\"><Default /></span>}\n        </div>\n      </div>\n    );\n  };\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}